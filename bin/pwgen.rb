#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# Some classes to generate passwords and rate them to find a good password for keyboard
# input by a human.
module Pwgen
  # Generate one or multiple passwords using {+pwgen}[https://sourceforge.net/projects/pwgen/].
  class Generator
    # Generate an array of {Password}s
    #
    # @param options [Hash] Options for +pwgen+
    # @option options [Array] :parameters Single letter options for +pwgen+, defaults are -c, -n and -y
    # @option options [Number] :length Password length, default is 14
    # @option options [Number] :number Number of passwords, the default is 1
    #
    # @return [Array<String>] Passwords generated by +pwgen+
    def self.generate(options = { })
      options = {
        parameters: %w[ -c -n -y ],
        length:     14,
        number:     1,
      }.merge(options)

      cmd = "pwgen %s %d %d" % [ options[:parameters].join(" "),
                                 options[:length],
                                 options[:number] ]

      %x{#{cmd}}.split.map { |password|
        Pwgen::Password.new(password)
      }
    end
  end

  # A password string and rating to find good passwords easily.
  #
  # See {Generator} to generate {Password}s.
  # See {Rating} about how a password string is rated.
  class Password
    include Comparable
    attr_reader :password
    attr_reader :rating

    # A new instance of {Password} rated by {Rating.rate}
    def initialize(password)
      @password = password.to_s
      @rating   = Rating.rate(self.password)
    end

    # Sort {Password}s based on their rating in ascending order
    def <=>(other)
      self.rating <=> other.rating
    end

    # The password string
    #
    # @return [String] The password as string
    def to_s
      self.password
    end
  end

  # Rate a string based on certain criteria interessting to passwords.
  #
  # * Left-right-hand keyboard key distribution
  # * Undesired characters
  class Rating
    UNDESIRED_CHARS = 'zZyYäÄöÖüÜ^°"§&/=ß?´`({[]})€+~#<>|\'\\'

    LEFT_HAND  =  '^123456' + 'qwert' + 'asdfg' + '<yxcv' +
                  '°!"§$%&' + 'QWERT' + 'ASDFG' + '>YXCV'
    RIGHT_HAND = '7890ß´' + 'zuiopü+' + 'hjklöä#' + 'bnm,.-' +
            '/()=?`' + 'ZUIOPÜ*' + "HJKLÖÄ'" + 'BNM;:_'

    LEFT_HAND_REGEXP  = Regexp.new('[%s]' % [LEFT_HAND],  Regexp::IGNORECASE)
    RIGHT_HAND_REGEXP = Regexp.new('[%s]' % [RIGHT_HAND], Regexp::IGNORECASE)

    # Rate a string as password
    #
    # @param password [String] The password to rate
    # @return [Number] The numeric rating of the password
    def self.rate(password)
      hand_changes(password) - (undesired_chars(password) * 3)
    end

    # The password string's number of undesired characters
    #
    # @param password [String] The password to check for undesired characters
    # @return [Number] The number of undesired characters of the password
    def self.undesired_chars(password)
      password.count(UNDESIRED_CHARS)
    end

    # Count the amount of left-hand/right-hand changes when the password is entered on
    # a QWERTZ keyboard layout
    #
    # @param password [String] The password to check for hand changes
    # @return [Number] The number of hand changeds
    def self.hand_changes(password)
      left_blocks  = password.gsub(LEFT_HAND_REGEXP,  ' ').split.size
      right_blocks = password.gsub(RIGHT_HAND_REGEXP, ' ').split.size
      left_blocks + right_blocks - 1
    end
  end
end

if __FILE__ == $0
  include Pwgen

  number    = 10000
  length    = 14
  top       = 20
  passwords = Generator.generate(number: number, length: length).sort[-top..-1].reverse

  puts "The #{passwords.size} best rated passwords:"
  puts
  fmt = "%6s %-#{length}s"
  puts fmt % [ "Rating", "Password" ]
  puts fmt % [ "------", "-"*length ]
  puts passwords.map { |p| fmt % [ p.rating, p.password ] }
end
