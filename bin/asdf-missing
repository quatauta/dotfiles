#!/usr/bin/env ruby

require "bundler/inline"
require "rubygems"

gemfile do
  source "https://rubygems.org"
  gem "cri", "~>2.15"
  gem "table_print", "~>1.5.7"
end

module Asdf
  module Missing
    class CliCommand
      def initialize
        @command = root_command
        @command.add_command(cmd_outdated)
        @command.add_command(cmd_update)
      end

      def run(opts_and_args)
        @command.run(opts_and_args)
      end

      def root_command
        cmd = Cri::Command.define do
          name File.basename($PROGRAM_NAME)
          usage "#{File.basename($PROGRAM_NAME)} [outdated|update]"
          summary "Some add-ons to asdf which I am missing"
          description "List outdated versions, and update them all. You may abbreviate the subcommand names."

          flag :h, :help, "show help for this command" do |_value, cmd|
            puts cmd.help
            exit 0
          end

          run do |opts, args, cmd|
            puts cmd.help
            exit 0
          end
        end
      end

      def cmd_outdated
        Cri::Command.define do
          name "outdated"
          usage "outdated"
          summary "Print all outdated tool versions."
          description "Compare each tool's version to the latest available version, and print available updates."

          run do |opts, args, cmd|
            outdated_plugins = ::Asdf::Missing.outdated
            tp outdated_plugins unless outdated_plugins.empty?
          end
        end
      end

      def cmd_update
        Cri::Command.define do
          name "update"
          usage "update"
          aliases "upgrade"
          summary "Update all tools to their latest version."
          description "Update each tool to its latest available version."

          run do |opts, args, cmd|
            ::Asdf::Missing.currents.each do |plugin, _|
              %w[install local].each do |cmd|
                `asdf #{cmd} #{plugin} latest`
              end
            end
          end
        end
      end
    end

    def self.currents
      versions = %x[asdf current 2>&1].lines.select { |line| line =~ /\/\.tool-versions/ }.map { |line| line.split[0..1] }
      versions = Hash[versions].select { |plugin, version| valid_version? version }
    end

    def self.latest(plugin)
      %x[asdf latest "#{plugin}"].strip
    end

    def self.valid_version?(text)
      text !~ /\Asystem|latest|__+\Z/
    end

    def self.version(text)
      Gem::Version.new(text)
    rescue
      text
    end

    def self.outdated
      currents.reduce([]) do |memo, current|
        plugin, current_version = current
        latest_version = latest(plugin)

        if (version(latest_version) <=> version(current_version)) == 1
           memo << { plugin: plugin, current: current_version, latest: latest_version }
        end

        memo
      end
    end
  end
end

Asdf::Missing::CliCommand.new.run(ARGV) if $PROGRAM_NAME == __FILE__
