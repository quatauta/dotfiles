#!/bin/bash
# vim:set shiftwidth=2:

set -o errexit
set -o nounset
set -o pipefail

FIND_PROJECTS_BASEDIR="${HOME}/work"
FIND_PROJECTS_GIT_USER="quatauta"
FIND_PROJECTS_MAX_DEPTH="4"
FIND_PROJECTS_IGNORE="/(gdk)/"

exit_trap() {
  echo "'${BASH_COMMAND}' exited with code $?"
}

trap exit_trap EXIT

_main() {
  for REPO in "${@:-.}"; do
    if [[ -n "${REPO}" ]]; then
      _update_dependencies "${REPO}"
    fi
  done
}

_update_dependencies() {
  local REPO="${1}"

  pushd "${REPO}" 1>/dev/null
  echo "##############################################"
  echo "### $(pwd)"
  echo "###"

  _git_checkout_main_pull || return

  _asdf_update_tool_versions
  _ruby_bundler_update
  _javascript_yarn_update
  _elixir_mix_update

  if [[ -z "$(git ls-files -m)" ]]; then
    echo "No changes :-)"
    return
  fi

  _git_new_branch_and_merge_request
  _git_commit_and_push
  _git_merge_and_pull_main

  popd 1>/dev/null
  echo "Done :-)"
}

_find_project_directories() {
  local BASE_DIR="$1"
  local GIT_REMOTE_USERNAME="$2"
  local MAX_DEPTH="$3"
  local IGNORE="$4"

  find "${BASE_DIR}" -maxdepth "${MAX_DEPTH}" -path "*/.git/config" \
                     -exec grep -El "(git@|https?:).*[:/]${GIT_REMOTE_USERNAME}/.*\.git$" {} + |
  sed -e 's_/\.git/config$__' |
  grep -Ev "${IGNORE}" |
  sort
}

_asdf_update_tool_versions() {
  if [[ -r .tool-versions ]]; then
    asdf install
    asdf-missing up
  fi
}

_ruby_bundler_update() {
  if [[ -r Gemfile.lock ]]; then
    bundle update --all 2>&1 | grep -FEv "(Fetching|Installing|Using|updated)" || true
  fi
}

_javascript_yarn_update() {
  if [[ -r yarn.lock ]]; then
    yarn upgrade | grep -Fv -e "├─" -e "└─" || true
  fi
}

_elixir_mix_update() {
  if [[ -r mix.lock ]]; then
    mix local.hex --force
    mix local.rebar --force
    mix deps.update --all
  fi
}

_git_has_remote() {
  git remote | grep -q .
}

_git_checkout_main_pull() {
  if [[ -d .git ]] ; then
    git checkout --quiet main
    if _git_has_remote ; then
      git pull --quiet --autostash
    fi
  fi
}

_git_new_branch_and_merge_request() {
  if [[ -d .git ]] ; then
    git branch --quiet -D dependencies-"$(date +%Y-%m-%d)" &>/dev/null || true
    git checkout --quiet -b dependencies-"$(date +%Y-%m-%d)"
    if _git_has_remote ; then
      git push --quiet --prune --set-upstream -o merge_request.create -o merge_request.remove_source_branch -u origin HEAD
    fi
  fi
}

_git_commit_and_push() {
  if [[ -d .git ]] ; then
    while [[ -n "$(git ls-files -m)" ]]; do
      echo -e 'y\nq\n' | git commit --quiet -p -m "Update dependencies $(date +%Y-%m-%d)"
      if _git_has_remote ; then
        git push --quiet -u origin HEAD
      fi
    done
  fi
}

_git_merge_and_pull_main() {
  if [[ -d .git ]] && _git_has_remote ; then
    glab mr update -a quatauta -r
    glab mr merge -dsy --when-pipeline-succeeds
    git checkout --quiet main
    git pull --quiet --autostash
  fi
}

_git_prune_remote_branches() {
  if [[ -d .git ]] ; then
    git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' |
      awk '$2 == "[gone]" {print $1}' |
      xargs -rt git branch --quiet -D
  fi
}

if [[ "${#@}" -eq 0 ]]; then
  set -- $(_find_project_directories "${FIND_PROJECTS_BASEDIR}" "${FIND_PROJECTS_GIT_USER}" "${FIND_PROJECTS_MAX_DEPTH}" "${FIND_PROJECTS_IGNORE}")
fi

_main "${@:-}"
