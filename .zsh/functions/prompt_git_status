# vim:syntax=zsh:

# Copied and adapted from Nicolas Gallagher (necolas)
# https://github.com/necolas/dotfiles/blob/master/shell/bash_prompt
prompt_git_status() {
    local prefix="$1"
    local suffix="$2"

    local branch=""
    local branch_status=""

    local separator=":"
    local uncommitted="+"
    local unstaged="!"
    local untracked="?"
    local stashed="$"

    # check if the current directory is in a git repository
    if git rev-parse --is-inside-work-tree &>/dev/null ; then
        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2>/dev/null)" = "false" ]; then
            git update-index --really-refresh  -q &>/dev/null # ensure index is up to date

            $(git diff --quiet --ignore-submodules --cached)     || branch_status+="${uncommitted}"
            $(git diff-files --quiet --ignore-submodules --)     || branch_status+="${unstaged}"
            [ -n "$(git ls-files --others --exclude-standard)" ] && branch_status+="${untracked}"
            $(git rev-parse --verify refs/stash &>/dev/null)     && branch_status+="${stashed}"

            [ -n "${branch_status}" ] && branch_status="${separator}${branch_status}"
        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branch="$(git symbolic-ref --quiet --short HEAD 2>/dev/null || \
                  git rev-parse --short HEAD 2>/dev/null || \
                  printf "(unknown)")"

        printf "%s" "${prefix}${branch}${branch_status}${suffix}"
    else
        return
    fi
}
