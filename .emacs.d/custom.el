(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(LaTeX-beamer-section-labels-flag t)
 '(LaTeX-csquotes-close-quote "}")
 '(LaTeX-csquotes-open-quote "\\enquote{")
 '(LaTeX-csquotes-quote-after-quote t)
 '(LaTeX-default-options (quote ("a4paper" "ngerman")))
 '(LaTeX-default-position nil)
 '(LaTeX-default-style "scrbook")
 '(LaTeX-float nil)
 '(LaTeX-item-indent -1)
 '(LaTeX-label-function (quote reftex-label))
 '(LaTeX-mode-hook (quote (reftex-mode)))
 '(TeX-DVI-via-PDFTeX t)
 '(TeX-PDF-mode t)
 '(TeX-auto-global "/home/daniel/.emacs.d/auctex/auto-global")
 '(TeX-auto-local ".auctex")
 '(TeX-auto-private (quote ("~/.emacs.d/auctex/auto/")))
 '(TeX-auto-save t)
 '(TeX-auto-untabify t)
 '(TeX-auto-x-regexp-list (quote TeX-auto-full-regexp-list))
 '(TeX-check-path
   (quote
    ("./" "~/texmf" "/usr/share/texmf/bibtex/bst/" "/usr/share/texmf/tex/")))
 '(TeX-electric-escape nil)
 '(TeX-electric-sub-and-superscript t)
 '(TeX-force-default-mode t)
 '(TeX-insert-braces nil)
 '(TeX-macro-private (quote ("~/texmf")))
 '(TeX-newline-function (quote newline-and-indent))
 '(TeX-parse-self t t)
 '(TeX-quote-after-quote t)
 '(TeX-quote-language-alist (quote (("ngerman" "\"`" "\"'" t))))
 '(TeX-save-query nil)
 '(TeX-source-specials-mode t)
 '(TeX-source-specials-view-start-server t)
 '(TeX-style-private (quote ("~/.emacs.d/auctex/style")))
 '(auto-compression-mode t nil (jka-compr))
 '(auto-save-list-file-prefix "~/.emacs.d/auto-save-list/saves-")
 '(backup-by-copying t)
 '(backup-directory-alist (quote (("." . "~/.emacs.d/backups"))))
 '(bib-cite-use-reftex-view-crossref t)
 '(bibtex-align-at-equal-sign t)
 '(bibtex-comma-after-last-field t)
 '(bibtex-entry-format
   (quote
    (opts-or-alts required-fields numerical-fields page-dashes inherit-booktitle realign last-comma delimiters unify-case)))
 '(bibtex-maintain-sorted-entries t)
 '(blink-cursor-mode nil)
 '(bs-default-configuration "all")
 '(c-basic-offset 4)
 '(c-cleanup-list (quote (list-close-comma scope-operator)))
 '(c-hanging-braces-alist
   (quote
    ((brace-list-open)
     (brace-entry-open)
     (substatement-open before after)
     (block-close . c-snug-do-while)
     (extern-lang-open after)
     (inexpr-class-open before after)
     (inexpr-class-close before))))
 '(c-indent-comments-syntactically-p t)
 '(c-mode-common-hook
   (quote
    ((lambda nil
       (c-set-style "linux")
       (c-set-offset
        (quote case-label)
        4)
       (setq c-basic-offset 4)))))
 '(c-offsets-alist
   (quote
    ((string . c-lineup-dont-change)
     (c . c-lineup-C-comments)
     (defun-open . 0)
     (defun-close . 0)
     (defun-block-intro . +)
     (class-open . 0)
     (class-close . 0)
     (inline-open . 0)
     (inline-close . 0)
     (func-decl-cont . +)
     (knr-argdecl-intro . +)
     (knr-argdecl . 0)
     (topmost-intro . 0)
     (topmost-intro-cont . 0)
     (member-init-intro . +)
     (member-init-cont . c-lineup-multi-inher)
     (inher-intro . +)
     (inher-cont . c-lineup-multi-inher)
     (block-open . 0)
     (block-close . 0)
     (brace-list-open . 0)
     (brace-list-close . 0)
     (brace-list-intro . +)
     (brace-list-entry . 0)
     (brace-entry-open . 0)
     (statement . 0)
     (statement-cont . +)
     (statement-block-intro . +)
     (statement-case-intro . +)
     (statement-case-open . 0)
     (substatement . +)
     (substatement-open . +)
     (case-label . 0)
     (access-label . -)
     (label . 2)
     (do-while-closure . 0)
     (else-clause . 0)
     (catch-clause . 0)
     (comment-intro . c-lineup-comment)
     (arglist-intro . +)
     (arglist-cont . 0)
     (arglist-cont-nonempty . c-lineup-arglist)
     (arglist-close . +)
     (stream-op . c-lineup-streamop)
     (inclass . +)
     (cpp-macro .
                [0])
     (cpp-macro-cont . c-lineup-dont-change)
     (friend . 0)
     (objc-method-intro .
                        [0])
     (objc-method-args-cont . c-lineup-ObjC-method-args)
     (objc-method-call-cont . c-lineup-ObjC-method-call)
     (extern-lang-open . 0)
     (extern-lang-close . 0)
     (inextern-lang . +)
     (namespace-open . 0)
     (namespace-close . 0)
     (innamespace . +)
     (template-args-cont c-lineup-template-args +)
     (inlambda . c-lineup-inexpr-block)
     (lambda-intro-cont . +)
     (inexpr-statement . 0)
     (inexpr-class . +))))
 '(cal-tex-24 t)
 '(case-fold-search t)
 '(case-replace nil)
 '(change-major-mode-with-file-name t)
 '(column-number-mode t)
 '(completion-ignored-extensions
   (quote
    (".o" "~" ".bin" ".lbin" ".so" ".a" ".ln" ".blg" ".bbl" ".elc" ".lof" ".glo" ".idx" ".lot" ".svn/" ".hg/" ".git/" ".bzr/" "CVS/" "_darcs/" "_MTN/" ".fmt" ".tfm" ".class" ".fas" ".lib" ".mem" ".x86f" ".sparcf" ".fasl" ".ufsl" ".fsl" ".dxl" ".pfsl" ".dfsl" ".p64fsl" ".d64fsl" ".dx64fsl" ".lo" ".la" ".gmo" ".mo" ".toc" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs" ".pyc" ".pyo" ".ilg" ".ind" ".out" ".fdb_latexmk")))
 '(custom-buffer-done-function (quote kill-buffer))
 '(custom-safe-themes
   (quote
    ("c806e55531f941fa7efb0a677aeea7a763cdfc154fa8b9e0ddc6582d858c01a8" default)))
 '(custom-theme-load-path
   (quote
    ("/home/daniel/.emacs.d/site-lisp/inkpot/" custom-theme-directory t)))
 '(delete-selection-mode t)
 '(desktop-base-file-name "~/.emacs.d/desktop.el")
 '(desktop-file-name-format (quote tilde))
 '(desktop-files-not-to-save "\\(^/[^/:]*:\\|.*\\/\\.emacs\\.d\\/.*\\|.*{arch}.*\\)")
 '(desktop-path (quote ("." "~/.emacs" "~")))
 '(display-time-24hr-format t)
 '(display-time-day-and-date t)
 '(display-time-format "%a, %e. %b %Y  %H:%M ")
 '(display-time-mode t)
 '(display-time-use-mail-icon t)
 '(european-calendar-style t)
 '(fill-column 90)
 '(font-latex-quotes (quote german))
 '(frame-background-mode (quote light))
 '(fringe-indicators (quote left) nil (fringe))
 '(global-auto-revert-mode t)
 '(global-hl-line-mode t)
 '(history-length t)
 '(hl-line-face (quote highlight))
 '(home-end-enable t)
 '(ibuffer-enable t)
 '(icomplete-mode t)
 '(indent-tabs-mode nil)
 '(indicate-empty-lines t)
 '(inhibit-startup-buffer-menu t)
 '(inhibit-startup-screen t)
 '(ispell-highlight-face (quote underline))
 '(ispell-prefer-aspell t)
 '(iswitchb-mode t)
 '(make-backup-files nil)
 '(minibuffer-prompt-properties
   (quote
    (read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)))
 '(mmm-global-mode (quote maybe) nil (mmm-mode))
 '(mmm-major-mode-preferences
   (quote
    ((perl cperl-mode perl-mode)
     (javascript javascript-mode c++-mode)
     (java jde-mode java-mode c++-mode)
     (css css-mode c++-mode)
     (php php-mode)
     (ruby ruby-mode))))
 '(mmm-mode-ext-classes-alist
   (quote
    ((html-mode "" embedded-css)
     (html-mode "\\.rhtml$" erb-code)
     (html-mode "" html-php)
     (html-mode "" html-js))) nil (mmm-mode))
 '(mouse-wheel-follow-mouse t)
 '(mouse-wheel-mode t nil (mwheel))
 '(mouse-wheel-progressive-speed nil)
 '(mouse-yank-at-point t)
 '(msb-display-invisible-buffers-p t)
 '(nxml-auto-insert-xml-declaration-flag t)
 '(nxml-slash-auto-complete-flag t)
 '(ps-line-number t)
 '(ps-paper-type (quote a4))
 '(rails-ws:default-server-type "thin")
 '(recentf-arrange-by-rules-min-items 3)
 '(recentf-max-menu-items 20)
 '(recentf-menu-filter (quote recentf-arrange-by-mode))
 '(recentf-mode t)
 '(recentf-save-file "~/.emacs.d/recentf.el")
 '(reftex-allow-detached-macro-args t)
 '(reftex-default-label-alist-entries
   (quote
    (AMSTeX amsmath endnotes fancybox floatfig longtable picinpar rotating sidecap subfigure supertab wrapfig LaTeX)))
 '(reftex-label-menu-flags (quote (t t t nil nil nil t t)))
 '(reftex-plug-into-AUCTeX t)
 '(reftex-sort-bibtex-matches (quote author))
 '(reftex-toc-include-file-boundaries t)
 '(reftex-toc-include-labels t)
 '(reftex-vref-is-default t)
 '(require-final-newline t)
 '(ruby-electric-expand-delimiters-list nil)
 '(ruby-electric-simple-keywords-re
   "\\(def\\|if\\|class\\|module\\|unless\\|case\\|while\\|do\\|until\\|for\\|begin\\)")
 '(safe-local-variable-values
   (quote
    ((sh-basic-offset . 2)
     (sh-indentation . 2)
     (TeX-master . "vorlage"))))
 '(save-abbrevs nil)
 '(save-place t nil (saveplace))
 '(save-place-file "~/.emacs.d/places.el")
 '(savehist-file "~/.emacs.d/history.el")
 '(scroll-conservatively 20)
 '(scroll-margin 3)
 '(server-mode t)
 '(sh-learn-basic-offset t)
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(speedbar-scan-subdirs t)
 '(speedbar-show-unknown-files t)
 '(tab-width 8)
 '(text-mode-hook
   (quote
    (turn-on-auto-fill text-mode-hook-identify turn-on-filladapt-mode)))
 '(tool-bar-mode nil)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(visible-bell t)
 '(widget-choice-toggle t)
 '(windmove-wrap-around t)
 '(word-wrap t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(button ((t (:inherit variable-pitch :underline t))))
 '(custom-button ((((type x w32 mac) (class color)) (:inherit variable-pitch :background "#e4e2d4" :foreground "#4e4c40" :box (:line-width 2 :style released-button)))))
 '(custom-button-mouse ((((type x w32 mac) (class color)) (:inherit custom-button :background "grey90" :foreground "black"))))
 '(custom-button-pressed ((((type x w32 mac) (class color)) (:inherit custom-button-mouse :box (:line-width 2 :style pressed-button)))))
 '(custom-documentation ((t (:inherit variable-pitch))))
 '(diff-added ((((type x w32 mac) (class color)) (:inherit diff-changed :foreground "cyan4"))) t)
 '(diff-changed ((((type x w32 mac) (class color)) (:foreground "orange3"))) t)
 '(diff-context ((((type x w32 mac) (class color)) nil)) t)
 '(diff-file-header ((((type x w32 mac) (class color)) (:foreground "seagreen" :weight bold))) t)
 '(diff-function ((t (:inherit diff-context-face :slant italic))) t)
 '(diff-header ((((type x w32 mac) (class color)) (:background "seashell3" :weight bold))) t)
 '(diff-hunk-header ((((type x w32 mac) (class color)) (:inherit diff-header :foreground "brown"))) t)
 '(diff-removed ((((type x w32 mac) (class color)) (:inherit diff-changed :foreground "mediumpurple3"))) t)
 '(fixed-pitch ((t (:family "courier"))))
 '(flyspell-duplicate-face ((((class color)) (:inherit flyspell-incorrect-face :overline t))) t)
 '(font-latex-sedate-face ((((type x w32 mac) (class color) (background light)) (:foreground "DarkMagenta"))) t)
 '(font-latex-subscript-face ((t (:height 0.9))) t)
 '(font-latex-superscript-face ((t (:height 0.9))) t)
 '(font-latex-verbatim-face ((((type x w32 mac) (class color) (background light)) (:foreground "SaddleBrown"))) t)
 '(highlight-current-line-face ((((type x w32 mac) (class color)) (:background "#dcd6c8"))) t)
 '(html-tag-face ((((type x w32 mac) (class color)) (:foreground "dodger blue"))) t)
 '(mode-line ((t (:background "#dfddcd" :foreground "black" :box (:line-width -1 :style released-button)))))
 '(mode-line-highlight ((((class color) (min-colors 88)) (:background "grey80"))))
 '(modeline ((t (:background "red" :foreground "#b9b9b9" :weight bold))) t)
 '(mouse ((((type x w32 mac) (class color)) (:background "black"))))
 '(tool-bar ((((type x w32 mac) (class color)) (:inherit mode-line :background "#c7bba0" :foreground "black" :box (:line-width 1 :style released-button)))))
 '(underline ((t (:underline t))))
 '(variable-pitch ((t (:height 0.9 :family "sans"))))
 '(widget-button ((t (:inherit variable-pitch :weight bold))))
 '(widget-button-pressed ((((class color)) (:inherit variable-pitch :foreground "red"))))
 '(widget-documentation ((((class color) (background light)) (:inherit variable-pitch :foreground "dark green")))))
