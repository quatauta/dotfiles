#! /bin/sh
#
# -*-sh-*-
#
#     m_gnomecard - GnomeCard Address book module for lbdb
#     Copyright (C) 2000 Rick Frankel <rick@rickster.com>
#                   2000-2005 Roland Rosenfeld <roland@spinnaker.de>
#
#     This program is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 2 of the License, or
#     (at your option) any later version.
# 
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software Foundation,
#     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,, USA.

prefix=${prefix:-/usr}
exec_prefix=${exec_prefix:-$prefix}
libdir=${libdir:-/usr/lib}
AWK=${AWK:-/bin/gawk}

m_vcard_query ()
{
    AWK=/usr/bin/awk
    RECODE=/usr/bin/recode
    LOCALE=/usr/bin/locale

    if [ -z "$VCARD_OUTPUT_ENCODING" -a -x "$LOCALE" ] ; then
        VCARD_OUTPUT_ENCODING=$($LOCALE charmap)
    fi
    
    for file in $VCARD_FILES ; do
        if [ $file = ${file#/} ] ; then
            file=$HOME/$file
        fi

        encoding=$(echo "$file" | awk -F: '{ print $2 }')
        file=$(echo "$file" | awk -F: '{ print $1 }')

        if [ -f $file ] ; then
            (
                if [ "$encoding" = "$VCARD_OUTPUT_ENCODING" ] ; then
                    cat "$file"
                elif [ -z "$encoding" ] && [ -z "$VCARD_OUTPUT_ENCODING" ] ; then
                    cat "$file"
                elif [ -x $RECODE ] ; then
                    recode $encoding..$VCARD_OUTPUT_ENCODING < "$file"
                else
                    cat "$file"
                fi
            )
        fi
    done |
    $AWK '
    BEGIN {
        FS = ":"
        RS = "\r\n"
        name = ""
        nick = ""
        place = ""
        emailCount = 0
        email[emailCount] = ""
        type[emailCount] = ""
    }
    /^BEGIN:VCARD/ {
        name = ""
        nick = ""
        place = ""
        emailCount = 0
        email[emailCount] = ""
        type[emailCount] = ""
    }
    /^N[:;]/ {
        split($2, a, ";")
        name = sprintf("%s %s", a[2], a[1])
    }
    /^FN[:;]/ {
        name = $2
    }
    /^EMAIL[:;]/ {
        email[emailCount] = $2
        type[emailCount]  = substr($1, 7)
        if (type[emailCount])
            type[emailCount] = ":" type[emailCount]
        else
            type[emailCount] = ":~"
        emailCount++
    }
    /^NICKNAME:/ {
        nick = $2
    }
    /^ADR[:;]/ {
        split($2, address, ";")
        place = address[4]
        gsub(/\\,/, ",", place)
    }
    name != "" && emailCount != 0 && /^END:VCARD/ {
        add = ""
        if (nick && place)
            add = sprintf("(%s, %s), VCARD", nick, place)
        else if (nick)
            add = sprintf("(%s), VCARD", nick)
        else if (place)
            add = sprintf("(%s), VCARD", place)
        else
            add = "VCARD" type[x]

        format = "%s\t" name "\t" add "%s\n"
        for (x = 0; x < emailCount; x++)
            printf(format, email[x], type[x])
    }
    ' |
    grep -ia "$@"
}
